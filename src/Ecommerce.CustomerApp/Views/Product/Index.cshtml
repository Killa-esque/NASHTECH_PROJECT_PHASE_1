@using Ecommerce.Shared.ViewModels
@{
  var products = Model as List<ProductViewModel>;
  var search = ViewBag.Search as string ?? "";
  var sort = ViewBag.Sort as string ?? "";
  var categoryId = ViewBag.CategoryId as Guid?;
  var categories = ViewBag.Categories as List<CategoryViewModel> ?? new();
  var currentPage = ViewBag.CurrentPage ?? 1;
  var totalPages = ViewBag.TotalPages ?? 1;
  var totalItems = ViewBag.TotalItems ?? 0;
}

<section class="bg-amber-50 dark:bg-gray-800 py-20">
  <div class="max-w-7xl mx-auto px-6">
    <!-- Header -->
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold tracking-tight text-yellow-900 dark:text-yellow-300 mb-4">
        T·∫•t c·∫£ b√°nh ng·ªçt üç™
      </h1>
      <p class="text-lg text-amber-800 dark:text-yellow-300 max-w-xl mx-auto">
        Kh√°m ph√° b·ªô s∆∞u t·∫≠p b√°nh th·ªß c√¥ng ƒë·∫∑c bi·ªát ƒë∆∞·ª£c y√™u th√≠ch nh·∫•t t·∫°i ti·ªám.
      </p>
    </div>

    <!-- B·ªô l·ªçc & T√¨m ki·∫øm -->
    <form method="get" class="mb-10 flex flex-wrap items-center justify-between gap-4">
      <div class="text-sm text-yellow-900 dark:text-yellow-200">
        Hi·ªÉn th·ªã @products?.Count trong @totalItems s·∫£n ph·∫©m
      </div>
      <div class="flex flex-wrap gap-3">
        <input name="search" value="@search" placeholder="T√¨m ki·∫øm b√°nh..."
          class="input input-sm input-bordered bg-amber-50 dark:bg-gray-700 text-yellow-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-yellow-800" />

        <select name="sort" class="select select-sm bg-amber-100 dark:bg-gray-700 text-yellow-900 dark:text-yellow-200">
          <option value="latest" selected="@(sort == "latest")">M·ªõi nh·∫•t</option>
          <option value="price-asc" selected="@(sort == "price-asc")">Gi√° tƒÉng d·∫ßn</option>
          <option value="price-desc" selected="@(sort == "price-desc")">Gi√° gi·∫£m d·∫ßn</option>
          <option value="popular" selected="@(sort == "popular")">B√°n ch·∫°y</option>
        </select>

        <select name="categoryId"
          class="select select-sm bg-amber-100 dark:bg-gray-700 text-yellow-900 dark:text-yellow-200">
          <option value="">T·∫•t c·∫£ danh m·ª•c</option>
          @foreach (var cat in categories)
          {
            <option value="@cat.Id" selected="@(categoryId == cat.Id)">@cat.Name</option>
          }
        </select>

        <button
          class="btn btn-sm bg-yellow-800 hover:bg-yellow-700 text-white dark:bg-yellow-700 dark:hover:bg-yellow-600 transition">
          T√¨m
        </button>
      </div>
    </form>

    <!-- Hi·ªÉn th·ªã l·ªói -->
    @if (!string.IsNullOrEmpty(ViewBag.Error))
    {
      <div class="alert alert-error mb-6"><span>@ViewBag.Error</span></div>
    }

    <!-- Danh s√°ch s·∫£n ph·∫©m -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-8">
      @foreach (var product in products ?? new List<ProductViewModel>())
      {
        @await Html.PartialAsync("_ProductCard", product)
      }
    </div>

    <!-- Ph√¢n trang -->
    @if (totalPages > 1)
    {
      <div class="flex justify-center mt-12">
        <div class="join">
          @for (int i = 1; i <= totalPages; i++)
          {
            var isActive = i == currentPage;
            var query = $"?search={search}&categoryId={categoryId}&sort={sort}&pageIndex={i}";
            <a href="@query"
              class="join-item btn btn-sm @(isActive ? "bg-yellow-800 text-white dark:bg-yellow-600" : "bg-amber-100 text-amber-800 hover:bg-amber-200 dark:bg-gray-700 dark:text-yellow-300 dark:hover:bg-gray-600")">
              @i
            </a>
          }
        </div>
      </div>
    }

    <!-- CTA -->
    <div class="text-center mt-16">
      <a href="/Cart"
        class="inline-block bg-yellow-800 hover:bg-yellow-700 text-white px-6 py-3 rounded-lg text-sm font-medium transition">
        ƒê·∫∑t h√†ng ngay üõí
      </a>
    </div>
  </div>
</section>


@section Scripts {
  <script>
    @* async function addToCart(productId, quantity) {
      try {
        const response = await fetch('/Cart/AddToCart', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify({ productId, quantity })
        });

        const result = await response.json();
        if (result.success) {
          showToast(`ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng! : T·ªïng s·ªë l∆∞·ª£ng: ${result.totalItems}`, 'success');
          // C·∫≠p nh·∫≠t giao di·ªán gi·ªè h√†ng n·∫øu c·∫ßn
          updateCartIcon();
        } else {
          showToast(result.message, 'error');
        }
      } catch (error) {
        console.error('Error adding to cart:', error);
        showToast('ƒê√£ x·∫£y ra l·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng', 'error');
      }
    } *@
  </script>
}
