@using Ecommerce.Shared.Common
@using Ecommerce.Shared.DTOs
@using Ecommerce.Shared.ViewModels
@model ProductViewModel
@{
  var ratings = ViewBag.Ratings as PagedResult<RatingViewModel>;
  var averageRating = ratings?.Items.Any() == true ? ratings.Items.Average(r => r.RatingValue) : 0;
}

<section class="bg-amber-50 dark:bg-gray-800 py-20">
  <div class="max-w-6xl mx-auto px-6 grid grid-cols-1 lg:grid-cols-2 gap-12">
    <!-- H√¨nh ·∫£nh b√°nh -->
    <div class="space-y-4">
      <div class="rounded-xl overflow-hidden shadow-md">
        <img src="@(Model.ImageUrl.FirstOrDefault() ?? "/img/mini-cake.jpg")" alt="@Model.Name"
          class="w-full h-[400px] object-cover" id="main-image" />
      </div>
      <div class="flex gap-2 overflow-x-auto">
        @foreach (var image in Model.ImageUrl)
        {
          <img src="@image"
            class="w-20 h-20 object-cover rounded-lg border border-amber-200 dark:border-gray-600 cursor-pointer"
            onclick="document.getElementById('main-image').src=this.src" />
        }
      </div>
    </div>

    <!-- Th√¥ng tin b√°nh -->
    <div class="space-y-6">
      <!-- Breadcrumb -->
      <div class="text-sm breadcrumbs">
        <ul>
          <li><a href="/">Trang ch·ªß</a></li>
          <li><a href="/Product">S·∫£n ph·∫©m</a></li>
          <li>@Model.Name</li>
        </ul>
      </div>

      <h1 class="text-3xl font-bold text-yellow-900 dark:text-yellow-300">
        @Model.Name
      </h1>

      <div class="flex items-center gap-2">
        <div class="rating rating-md">
          @for (int i = 1; i <= 5; i++)
          {
            <input type="radio" name="average-rating" class="mask mask-star-2 bg-yellow-500" @(i <= averageRating ?
                                                                                                         "checked" : "") disabled />
                    }
        </div>
        <span class="text-sm text-amber-800 dark:text-yellow-300 font-medium">@averageRating.ToString("0.0") sao</span>
        <span class="text-sm text-gray-500 dark:text-gray-400">‚Ä¢ @((ratings?.Items?.Count() ?? 0)) ƒë√°nh gi√°</span>
      </div>

      <p class="text-base leading-relaxed text-amber-800 dark:text-yellow-300">
        @Model.Description
      </p>

      <div class="text-2xl font-bold text-yellow-900 dark:text-yellow-100">
        @Model.Price.ToString("N0") $
      </div>

      <div class="form-control max-w-xs">
        <label class="label">
          <span class="label-text text-yellow-800 dark:text-yellow-300">S·ªë l∆∞·ª£ng</span>
        </label>
        <div class="flex items-center gap-2">
          <button type="button" onclick="updateDetailQuantity(-1)"
            class="btn btn-sm bg-amber-100 text-amber-800 dark:bg-gray-700 dark:text-yellow-300">-</button>
          <input type="number" id="detailQuantity" value="1" min="1"
            class="input input-sm w-16 text-center bg-amber-50 dark:bg-gray-700 text-yellow-900 dark:text-white" />
          <button type="button" onclick="updateDetailQuantity(1)"
            class="btn btn-sm bg-amber-100 text-amber-800 dark:bg-gray-700 dark:text-yellow-300">+</button>
        </div>
      </div>

      <div class="flex gap-4 max-w-xs mt-4">
        <button onclick="addToCart('@Model.Id', document.getElementById('detailQuantity').value)"
          class="btn flex-1 bg-yellow-800 hover:bg-yellow-700 text-white transition">
          üõí Th√™m v√†o gi·ªè
        </button>
        <a href="/Cart" class="btn flex-1 bg-red-600 hover:bg-red-500 text-white transition">
          üßæ ƒê·∫∑t b√°nh ngay
        </a>
      </div>

      <!-- Th√¥ng tin chi ti·∫øt -->
      <div class="collapse collapse-arrow bg-amber-50 dark:bg-gray-700 mt-6">
        <input type="checkbox" />
        <div class="collapse-title font-medium text-yellow-800 dark:text-yellow-100">
          Th√¥ng tin s·∫£n ph·∫©m
        </div>
        <div class="collapse-content text-sm text-yellow-900 dark:text-yellow-200">
          <ul class="list-disc list-inside space-y-1">
            <li>Tr·ªçng l∆∞·ª£ng: @(Model.Weight ?? "ƒêang c·∫≠p nh·∫≠t")</li>
            <li>Th√†nh ph·∫ßn: @(Model.Ingredients ?? "ƒêang c·∫≠p nh·∫≠t")</li>
            <li>H·∫°n s·ª≠ d·ª•ng: @(Model.ExpirationDate ?? "ƒêang c·∫≠p nh·∫≠t")</li>
            <li>B·∫£o qu·∫£n: @(Model.StorageInstructions ?? "ƒêang c·∫≠p nh·∫≠t")</li>
            <li>D·ªã ·ª©ng: @(Model.Allergens ?? "ƒêang c·∫≠p nh·∫≠t")</li>
          </ul>
        </div>
      </div>

      @if (!string.IsNullOrEmpty(ViewBag.Error))
      {
        <div class="alert alert-error mt-4">
          <span>@ViewBag.Error</span>
        </div>
      }
    </div>
  </div>

  <!-- ƒê√°nh gi√° s·∫£n ph·∫©m -->
  <div class="max-w-6xl mx-auto px-6 mt-20 space-y-10">
    <h2 class="text-xl font-semibold text-yellow-900 dark:text-yellow-300">ƒê√°nh gi√° s·∫£n ph·∫©m</h2>

    <!-- Swiper rating cards -->
    <div class="swiper mySwiper">
      <div class="swiper-wrapper">
        @foreach (var rating in ratings?.Items ?? new List<RatingViewModel>())
        {
          <div class="swiper-slide">
            <div class="card bg-white dark:bg-gray-700 shadow-md rounded-xl p-4">
              <div class="flex items-center justify-between mb-2">
                <h4 class="text-sm font-semibold text-yellow-900 dark:text-yellow-100">@rating.UserName</h4>
                <div class="rating rating-sm">
                  @for (int i = 1; i <= 5; i++)
                  {
                    <input type="radio" class="mask mask-star-2 bg-yellow-500" name="rating-@rating.Id" @(i == rating.RatingValue ? "checked" : "") disabled />
                  }
                </div>
              </div>
              <p class="text-sm text-amber-800 dark:text-yellow-200 mb-2">@rating.Comment</p>
              <p class="text-xs text-gray-500">@rating.CreatedDate.ToString("dd/MM/yyyy HH:mm")</p>
            </div>
          </div>
        }
      </div>
    </div>

    <!-- G·ª≠i ƒë√°nh gi√° m·ªõi -->
    <!-- Trong Detail.cshtml, ph·∫ßn g·ª≠i ƒë√°nh gi√° -->
    @if (User.Identity?.IsAuthenticated == true)
    {
      <form asp-action="Rate" method="post" class="space-y-4" onsubmit="return validateRatingForm()">
        <input type="hidden" name="ProductId" value="@Model.Id" />
        <div class="form-control max-w-md">
          <label class="label">
            <span class="label-text text-yellow-800 dark:text-yellow-300">S·ªë sao</span>
          </label>
          <div class="rating rating-lg">
            @for (int i = 1; i <= 5; i++)
            {
              <input type="radio" name="RatingValue" value="@i" class="mask mask-star-2 bg-yellow-500" required />
            }
          </div>
          <label class="label">
            <span class="label-text-alt text-red-600 hidden" id="ratingError">Vui l√≤ng ch·ªçn s·ªë sao!</span>
          </label>
        </div>
        <div class="form-control max-w-md">
          <label class="label">
            <span class="label-text text-yellow-800 dark:text-yellow-300">N·ªôi dung</span>
          </label>
          <textarea name="Comment" rows="4"
          class="textarea textarea-bordered bg-amber-50 dark:bg-gray-700 text-yellow-900 dark:text-white"
          placeholder="B·∫°n th·∫•y s·∫£n ph·∫©m n√†y nh∆∞ th·∫ø n√†o?"></textarea>
        </div>
        <button type="submit"
          class="btn bg-yellow-800 hover:bg-yellow-700 text-white dark:bg-yellow-700 dark:hover:bg-yellow-600">
          G·ª≠i ƒë√°nh gi√°
        </button>
      </form>
    }
    else
    {
      <div class="text-sm text-amber-800 dark:text-yellow-300">
        B·∫°n c·∫ßn <a href="/Login" class="underline font-medium text-yellow-900 dark:text-yellow-200">ƒëƒÉng nh·∫≠p</a>
        ƒë·ªÉ g·ª≠i ƒë√°nh gi√°.
      </div>
    }
  </div>
</section>

@section Scripts {
  <script>
    const swiper2 = new Swiper('.mySwiper', {
      slidesPerView: 1,
      spaceBetween: 16,
      breakpoints: {
        640: { slidesPerView: 2 },
        1024: { slidesPerView: 3 }
      },
      pagination: { el: '.swiper-pagination', clickable: true }
    });

    function updateDetailQuantity(change) {
      const qtyInput = document.getElementById('detailQuantity');
      const minusButton = document.getElementById('minusButton');
      let currentVal = parseInt(qtyInput.value) || 1;
      const newVal = Math.max(1, currentVal + change);
      qtyInput.value = newVal;
      minusButton.disabled = newVal <= 1; // V√¥ hi·ªáu h√≥a n√∫t gi·∫£m khi quantity = 1
    }

    function validateRatingForm() {
      const ratingInputs = document.querySelectorAll('input[name="RatingValue"]');
      const ratingError = document.getElementById('ratingError');
      const isRatingSelected = Array.from(ratingInputs).some(input => input.checked);

      if (!isRatingSelected) {
        ratingError.classList.remove('hidden');
        showToast("Vui l√≤ng ch·ªçn s·ªë sao!", "error");
        return false;
      }

      ratingError.classList.add('hidden');
      return true;
    }
  </script>
}
