@using Ecommerce.Shared.ViewModels
@model List<CartItemViewModel>
@{
    ViewData["Title"] = "Gi·ªè h√†ng";
    var total = Model.Sum(i => i.Price * i.Quantity);
}

<section class="bg-amber-100 dark:bg-gray-900 py-20 px-6 rounded">
    <div class="max-w-6xl mx-auto">
        <h1 class="text-3xl font-bold text-yellow-900 dark:text-yellow-300 mb-10">üõí Gi·ªè h√†ng c·ªßa b·∫°n</h1>

        <div class="overflow-x-auto bg-white dark:bg-gray-800 rounded-xl shadow-md p-6">


            <table class="table w-full" id="cartTable">
                <thead>
                    <tr class="text-yellow-900 dark:text-yellow-300 text-sm">
                        <th></th>
                        <th class="text-left">S·∫£n ph·∫©m</th>
                        <th>S·ªë l∆∞·ª£ng</th>
                        <th>ƒê∆°n gi√°</th>
                        <th>T·∫°m t√≠nh</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody class="text-yellow-800 dark:text-yellow-100">
                    @if (!Model.Any())
                    {
                        <tr>
                            <td colspan="6" class="text-center text-yellow-800 dark:text-yellow-100">
                                Hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong gi·ªè h√†ng.
                            </td>
                        </tr>
                    }
                    else
                    {

                        @for (int i = 0; i < Model.Count; i++)
                        {
                            <tr class="border-t border-amber-200 dark:border-gray-600" data-product-id="@Model[i].ProductId">
                                <td>
                                    <img src="@Model[i].ImageUrl" alt="@Model[i].ProductName"
                                        class="w-14 h-14 object-cover rounded" />
                                </td>
                                <td>@Model[i].ProductName</td>
                                <td>
                                    <div class="flex items-center gap-2">
                                        <button type="button" onclick="updateQuantity(@i, -1)"
                                            class="btn btn-sm rounded bg-amber-100 text-yellow-900 dark:bg-gray-700 dark:text-yellow-200 @(Model[i].Quantity <= 1 ? "disabled" : "")"
                                            @(Model[i].Quantity <= 1 ? "disabled" : "")>-</button>
                                        <input type="number" id="qty-@i" value="@Model[i].Quantity" min="1"
                                            class="input input-sm w-16 text-center bg-amber-50 dark:bg-gray-700 text-yellow-900 dark:text-white border border-amber-200 dark:border-gray-600"
                                            onchange="updateQuantityServer(@i, this.value)" />
                                        <button type="button" onclick="updateQuantity(@i, 1)"
                                            class="btn btn-sm rounded bg-amber-100 text-yellow-900 dark:bg-gray-700 dark:text-yellow-200">+</button>
                                    </div>
                                </td>
                                <td id="price-@i">@Model[i].Price.ToString("N0") $</td>
                                <td id="total-@i">@((Model[i].Price * Model[i].Quantity).ToString("N0")) $</td>
                                <td>
                                    <button type="button" onclick="removeFromCart('@Model[i].ProductId', @i)"
                                        class="btn btn-xs bg-red-600 hover:bg-red-500 text-white rounded">‚ùå</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

            <!-- Notes + Total -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mt-10">
                <div>
                    <label class="label">
                        <span class="label-text text-yellow-900 dark:text-yellow-100 font-medium">üìù Ghi ch√∫ ƒë∆°n
                            h√†ng</span>
                    </label>
                    <textarea
                        class="textarea textarea-bordered w-full bg-white dark:bg-gray-700 text-yellow-900 dark:text-yellow-100"
                        rows="3" placeholder="VD: Ghi t√™n ng∆∞·ªùi nh·∫≠n l√™n b√°nh, ng√†y giao h√†ng, v.v."></textarea>
                </div>
            </div>

            <!-- T·ªïng ti·ªÅn -->
            <div class="divider my-8"></div>
            <div class="flex flex-col sm:flex-row justify-between items-center gap-4">
                <div class="text-yellow-900 dark:text-yellow-100 space-y-1 text-lg">
                    <p class="font-semibold">T·ªïng c·ªông:
                        <span class="text-xl font-bold" id="cartTotal">@total.ToString("N0") $</span>
                    </p>
                </div>
                <a href="/Order/Index"
                    class="btn bg-yellow-800 hover:bg-yellow-700 text-white px-6 py-3 rounded-lg text-sm font-medium transition">
                    ‚úÖ Ti·∫øn h√†nh ƒë·∫∑t b√°nh
                </a>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        async function removeFromCart(productId, index) {
            const url = `/Cart/Remove?productId=${productId}`;

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                });

                if (response.ok) {
                    const result = await response.json();
                    const items = result.items;

                    // C·∫≠p nh·∫≠t l·∫°i b·∫£ng gi·ªè h√†ng
                    const tbody = document.querySelector('#cartTable tbody');
                    tbody.innerHTML = ''; // X√≥a to√†n b·ªô n·ªôi dung hi·ªán t·∫°i

                    if (items.length === 0) {
                        tbody.innerHTML = `
                            <tr>
                                <td colspan="6" class="text-center text-yellow-800 dark:text-yellow-100">
                                    Hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong gi·ªè h√†ng.
                                </td>
                            </tr>`;
                    } else {
                        items.forEach((item, i) => {
                            tbody.innerHTML += `
                                <tr class="border-t border-amber-200 dark:border-gray-600" data-product-id="${item.productId}">
                                    <td>
                                        <img src="${item.imageUrl}" alt="${item.productName}" class="w-14 h-14 object-cover rounded" />
                                    </td>
                                    <td>${item.productName}</td>
                                    <td>
                                        <div class="flex items-center gap-2">
                                            <button type="button" onclick="updateQuantity(${i}, -1)"
                                                    class="btn btn-sm rounded bg-amber-100 text-yellow-900 dark:bg-gray-700 dark:text-yellow-200 ${item.quantity <= 1 ? 'disabled' : ''}"
                                                    ${item.quantity <= 1 ? 'disabled' : ''}>-</button>
                                            <input type="number" id="qty-${i}" value="${item.quantity}" min="1"
                                                   class="input input-sm w-16 text-center bg-amber-50 dark:bg-gray-700 text-yellow-900 dark:text-white border border-amber-200 dark:border-gray-600"
                                                   onchange="updateQuantityServer(${i}, this.value)" />
                                            <button type="button" onclick="updateQuantity(${i}, 1)"
                                                    class="btn btn-sm rounded bg-amber-100 text-yellow-900 dark:bg-gray-700 dark:text-yellow-200">+</button>
                                        </div>
                                    </td>
                                    <td id="price-${i}">${item.price.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })} $</td>
                                    <td id="total-${i}">${(item.price * item.quantity).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })} $</td>
                                    <td>
                                        <button type="button" onclick="removeFromCart('${item.productId}', ${i})"
                                                class="btn btn-xs bg-red-600 hover:bg-red-500 text-white rounded">‚ùå</button>
                                    </td>
                                </tr>`;
                        });
                    }

                    // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn gi·ªè h√†ng
                    updateCartTotal();
                    showToast('ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng!', 'success');
                } else {
                    const result = await response.json();
                    showToast(result.message || 'Failed to remove product', 'error');
                }
            } catch (error) {
                console.error('Error removing product from cart:', error);
                showToast('An error occurred while removing product from cart', 'error');
            }
        }

        function updateQuantity(index, change) {
            const qtyInput = document.getElementById(`qty-${index}`);
            let currentVal = parseInt(qtyInput.value) || 1;
            const newVal = Math.max(1, currentVal + change);
            qtyInput.value = newVal;
            updateQuantityServer(index, newVal);
        }

        async function updateQuantityServer(index, newQuantity) {
            const productId = document.querySelector(`#cartTable tr[data-product-id]:nth-child(${index + 1})`).getAttribute('data-product-id');
            const url = '/Cart/UpdateQuantity';
            const data = { productId: productId, quantity: parseInt(newQuantity) };

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    const result = await response.json();
                    const item = result.items.find(i => i.productId === productId);
                    if (item) {
                        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng v√† t·ªïng ti·ªÅn cho s·∫£n ph·∫©m
                        document.getElementById(`qty-${index}`).value = item.quantity;
                        document.getElementById(`total-${index}`).textContent =
                            (item.price * item.quantity).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 }) + ' $';

                        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn gi·ªè h√†ng
                        updateCartIcon();
                        updateCartTotal();
                    }
                } else {
                    const result = await response.json();
                    showToast(result.message || 'Failed to update quantity', 'error');
                }
            } catch (error) {
                console.error('Error updating quantity:', error);
                showToast('An error occurred while updating quantity', 'error');
            }
        }

        function updateCartTotal() {
            const totals = document.querySelectorAll('[id^="total-"]');
            const total = Array.from(totals).reduce((sum, elem) => {
                const value = parseFloat(elem.textContent.replace(/[^0-9.-]+/g, ''));
                return sum + (isNaN(value) ? 0 : value);
            }, 0);
            document.getElementById('cartTotal').textContent =
                total.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 }) + ' $';
        }

    </script>
}
