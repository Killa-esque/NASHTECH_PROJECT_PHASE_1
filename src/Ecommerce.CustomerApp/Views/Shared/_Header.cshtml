<header class="bg-amber-50 dark:bg-gray-800 shadow-md px-4 sm:px-10 py-4 tracking-wide sticky top-0 z-50">
  <div class="flex items-center justify-between w-full gap-6 flex-wrap">
    <!-- Logo -->
    <a href="/" class="text-2xl font-bold text-yellow-800 dark:text-yellow-300">
      Sweet Bakery
    </a>

    <!-- Desktop Menu -->
    <nav class="hidden lg:flex items-center gap-x-6 font-medium text-[15px]">
      <a href="/"
        class="text-yellow-800 hover:text-yellow-700 dark:text-yellow-300 dark:hover:text-yellow-100 transition">Home</a>
      <a href="/Product"
        class="text-yellow-800 hover:text-yellow-700 dark:text-yellow-300 dark:hover:text-yellow-100 transition">Products</a>
      <a href="/About"
        class="text-yellow-800 hover:text-yellow-700 dark:text-yellow-300 dark:hover:text-yellow-100 transition">About</a>
      <a href="/Contact"
        class="text-yellow-800 hover:text-yellow-700 dark:text-yellow-300 dark:hover:text-yellow-100 transition">Contact</a>
    </nav>

    <div class="hidden lg:flex items-center gap-4">
      @await Html.PartialAsync("_CartIcon")
      @await Html.PartialAsync("_SearchBar")

      @if (User.Identity?.IsAuthenticated ?? false)
      {
        @await Html.PartialAsync("_UserMenu")
      }
      else
      {
        <a href="/login"
          class="text-sm text-yellow-900 dark:text-yellow-300 hover:text-yellow-700 dark:hover:text-yellow-100 transition">
          Đăng nhập
        </a>
      }
    </div>

    <!-- Toggle Button (Mobile) -->
    <button id="menu-toggle" class="lg:hidden text-2xl text-yellow-800 dark:text-yellow-300">
      ☰
    </button>
  </div>

  <!-- Mobile Menu -->
  <div id="mobile-menu" class="hidden lg:hidden mt-4 space-y-4">
    <nav class="flex flex-col space-y-2 text-sm font-medium text-yellow-800 dark:text-yellow-300">
      <a href="/" class="hover:text-yellow-700 dark:hover:text-yellow-100">Home</a>
      <a href="/Product" class="hover:text-yellow-700 dark:hover:text-yellow-100">Products</a>
      <a href="/About" class="hover:text-yellow-700 dark:hover:text-yellow-100">About</a>
      <a href="/Contact" class="hover:text-yellow-700 dark:hover:text-yellow-100">Contact</a>
    </nav>
    <div class="flex flex-wrap items-center gap-4">
      @await Html.PartialAsync("_CartIcon")
      @await Html.PartialAsync("_SearchBar")
      @if (User.Identity?.IsAuthenticated ?? false)
      {
        <a href="/Account/Profile"
          class="text-yellow-900 dark:text-yellow-300 hover:text-yellow-700 dark:hover:text-yellow-100 text-sm">
          Hồ sơ
        </a>
        <a href="/Logout" class="text-yellow-900 dark:text-yellow-300 hover:text-red-600 dark:hover:text-red-400 text-sm">
          Đăng xuất
        </a>
      }
      else
      {
        <a href="/login"
          class="text-yellow-900 dark:text-yellow-300 hover:text-yellow-700 dark:hover:text-yellow-100 text-sm">
          Đăng nhập
        </a>
      }
    </div>
  </div>
</header>

@section Scripts {
  <script src="https://cdn.jsdelivr.net/npm/toastr@2.1.4/build/toastr.min.js"></script>
  <script>
    const toggleBtn = document.getElementById("menu-toggle");
    const mobileMenu = document.getElementById("mobile-menu");
    toggleBtn?.addEventListener("click", () => {
      mobileMenu.classList.toggle("hidden");
    });

    let addToCartDebounce;
    async function addToCart(productId, quantity) {
      clearTimeout(addToCartDebounce);
      addToCartDebounce = setTimeout(async () => {
        const url = '/Product/AddToCart';
        const data = { productId: productId, quantity: parseInt(quantity) };
        const button = event.target;
        button.disabled = true;

        try {
          const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });

          if (response.ok) {
            const result = await response.json();
            updateCartIcon(result.items, result.totalItems);
            toastr.success('Đã thêm vào giỏ hàng!');
          } else {
            const result = await response.json();
            toastr.error(result.message || 'Không thể thêm vào giỏ hàng');
          }
        } catch (error) {
          toastr.error('Đã xảy ra lỗi khi thêm vào giỏ hàng');
        } finally {
          button.disabled = false;
        }
      }, 300);
    }

    function updateCartIcon(items, totalItems) {
      const counter = document.getElementById('cartCounter');
      if (counter) {
        counter.textContent = totalItems || 0;
      }

      const summary = document.getElementById('cartSummary');
      if (summary) {
        summary.textContent = `${totalItems || 0} sản phẩm`;
      }

      const miniCart = document.getElementById('miniCartItems');
      if (miniCart) {
        miniCart.innerHTML = '';
        if (items && items.length > 0) {
          items.forEach(item => {
            const itemHtml = `
                              <div class="py-2 flex gap-3 items-center">
                                  <img src="${item.imageUrl || '/img/mini-cake.jpg'}" class="w-12 h-12 rounded object-cover" />
                                  <div class="flex-1 text-sm text-yellow-800 dark:text-yellow-100">
                                      <p>${item.productName} x ${item.quantity}</p>
                                      <p class="text-xs">${(item.price * item.quantity).toLocaleString('vi-VN')} ₫</p>
                                  </div>
                              </div>
                          `;
            miniCart.innerHTML += itemHtml;
          });
        } else {
          miniCart.innerHTML = '<p class="text-sm text-yellow-800 dark:text-yellow-100">Giỏ hàng trống</p>';
        }
      }
    }

    document.addEventListener('DOMContentLoaded', async () => {
      try {
        const response = await fetch('/Cart/GetCartItems', {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        if (response.ok) {
          const result = await response.json();
          updateCartIcon(result.items, result.totalItems);
        }
      } catch (error) {
        console.error('Error loading cart:', error);
      }
    });
  </script>
}
